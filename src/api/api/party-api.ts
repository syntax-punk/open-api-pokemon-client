/* tslint:disable */
/* eslint-disable */
/**
 * KG Pokemon API
 * Pokemon API for Konrad developer onboarding.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetParty200ResponseInner } from '../model';
// @ts-ignore
import { Party } from '../model';
// @ts-ignore
import { PostPartyRequest } from '../model';
// @ts-ignore
import { PutPartyRequest } from '../model';
/**
 * PartyApi - axios parameter creator
 * @export
 */
export const PartyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a party by id
         * @summary Delete Party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteParty', 'id', id)
            const localVarPath = `/party/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return IDs and Names of user\'s parties
         * @summary User\'s parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParty: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/party`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retreive a user\'s party
         * @summary Get a party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPartyById', 'id', id)
            const localVarPath = `/party/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new party
         * @summary Create party
         * @param {PostPartyRequest} postPartyRequest Specify up to 6 pokemon to add to the new party. Optionally provide a name for the party. IDs are of pokemon your trainer owns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postParty: async (postPartyRequest: PostPartyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postPartyRequest' is not null or undefined
            assertParamExists('postParty', 'postPartyRequest', postPartyRequest)
            const localVarPath = `/party`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postPartyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updated a specifc party
         * @summary Update party
         * @param {string} id The Pokemon\&#39;s unique ID
         * @param {PutPartyRequest} [putPartyRequest] Entire party object to be replaced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putParty: async (id: string, putPartyRequest?: PutPartyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putParty', 'id', id)
            const localVarPath = `/party/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putPartyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartyApi - functional programming interface
 * @export
 */
export const PartyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartyApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a party by id
         * @summary Delete Party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParty(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteParty(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return IDs and Names of user\'s parties
         * @summary User\'s parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParty(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetParty200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParty(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retreive a user\'s party
         * @summary Get a party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartyById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Party>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartyById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new party
         * @summary Create party
         * @param {PostPartyRequest} postPartyRequest Specify up to 6 pokemon to add to the new party. Optionally provide a name for the party. IDs are of pokemon your trainer owns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postParty(postPartyRequest: PostPartyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Party>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postParty(postPartyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updated a specifc party
         * @summary Update party
         * @param {string} id The Pokemon\&#39;s unique ID
         * @param {PutPartyRequest} [putPartyRequest] Entire party object to be replaced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putParty(id: string, putPartyRequest?: PutPartyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Party>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putParty(id, putPartyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartyApi - factory interface
 * @export
 */
export const PartyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartyApiFp(configuration)
    return {
        /**
         * Delete a party by id
         * @summary Delete Party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteParty(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return IDs and Names of user\'s parties
         * @summary User\'s parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParty(options?: any): AxiosPromise<Array<GetParty200ResponseInner>> {
            return localVarFp.getParty(options).then((request) => request(axios, basePath));
        },
        /**
         * Retreive a user\'s party
         * @summary Get a party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyById(id: string, options?: any): AxiosPromise<Party> {
            return localVarFp.getPartyById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new party
         * @summary Create party
         * @param {PostPartyRequest} postPartyRequest Specify up to 6 pokemon to add to the new party. Optionally provide a name for the party. IDs are of pokemon your trainer owns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postParty(postPartyRequest: PostPartyRequest, options?: any): AxiosPromise<Party> {
            return localVarFp.postParty(postPartyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updated a specifc party
         * @summary Update party
         * @param {string} id The Pokemon\&#39;s unique ID
         * @param {PutPartyRequest} [putPartyRequest] Entire party object to be replaced
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putParty(id: string, putPartyRequest?: PutPartyRequest, options?: any): AxiosPromise<Party> {
            return localVarFp.putParty(id, putPartyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartyApi - object-oriented interface
 * @export
 * @class PartyApi
 * @extends {BaseAPI}
 */
export class PartyApi extends BaseAPI {
    /**
     * Delete a party by id
     * @summary Delete Party
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public deleteParty(id: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).deleteParty(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return IDs and Names of user\'s parties
     * @summary User\'s parties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public getParty(options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).getParty(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retreive a user\'s party
     * @summary Get a party
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public getPartyById(id: string, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).getPartyById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new party
     * @summary Create party
     * @param {PostPartyRequest} postPartyRequest Specify up to 6 pokemon to add to the new party. Optionally provide a name for the party. IDs are of pokemon your trainer owns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public postParty(postPartyRequest: PostPartyRequest, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).postParty(postPartyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updated a specifc party
     * @summary Update party
     * @param {string} id The Pokemon\&#39;s unique ID
     * @param {PutPartyRequest} [putPartyRequest] Entire party object to be replaced
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyApi
     */
    public putParty(id: string, putPartyRequest?: PutPartyRequest, options?: AxiosRequestConfig) {
        return PartyApiFp(this.configuration).putParty(id, putPartyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
