/* tslint:disable */
/* eslint-disable */
/**
 * KG Pokemon API
 * Pokemon API for Konrad developer onboarding.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Pokemon } from '../model';
// @ts-ignore
import { PostTrainerPokemonRequest } from '../model';
// @ts-ignore
import { Trainer } from '../model';
/**
 * TrainerApi - axios parameter creator
 * @export
 */
export const TrainerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a pokemon from your account. Also known as \"releasing\" a pokemon.
         * @summary Release a pokemon
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainerPokemonId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrainerPokemonId', 'id', id)
            const localVarPath = `/trainer/pokemon/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about your pokemon trainer (user account).
         * @summary Get Trainer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainer: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trainer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all the pokemon you have
         * @summary Get your pokemon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainerPokemon: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trainer/pokemon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a pokemon that is attached to your account
         * @summary Get a pokemon
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainerPokemonId: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrainerPokemonId', 'id', id)
            const localVarPath = `/trainer/pokemon/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update your trainer profile. Returns the entire updated profile.
         * @summary Update Profile
         * @param {Trainer} [trainer] Object containing any fields to be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTrainer: async (trainer?: Trainer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trainer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(trainer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new pokemon to your account
         * @summary Add new pokemon
         * @param {PostTrainerPokemonRequest} [postTrainerPokemonRequest] New pokemon to add to your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTrainerPokemon: async (postTrainerPokemonRequest?: PostTrainerPokemonRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trainer/pokemon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTrainerPokemonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a pokemon. Entire entry must be sent.
         * @summary Update a pokemon
         * @param {string} id 
         * @param {Pokemon} [pokemon] Complete pokemon object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTrainerPokemonId: async (id: string, pokemon?: Pokemon, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTrainerPokemonId', 'id', id)
            const localVarPath = `/trainer/pokemon/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pokemon, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainerApi - functional programming interface
 * @export
 */
export const TrainerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainerApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a pokemon from your account. Also known as \"releasing\" a pokemon.
         * @summary Release a pokemon
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainerPokemonId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainerPokemonId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about your pokemon trainer (user account).
         * @summary Get Trainer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainer(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trainer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all the pokemon you have
         * @summary Get your pokemon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainerPokemon(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pokemon>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainerPokemon(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a pokemon that is attached to your account
         * @summary Get a pokemon
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainerPokemonId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pokemon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainerPokemonId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update your trainer profile. Returns the entire updated profile.
         * @summary Update Profile
         * @param {Trainer} [trainer] Object containing any fields to be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTrainer(trainer?: Trainer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trainer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTrainer(trainer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new pokemon to your account
         * @summary Add new pokemon
         * @param {PostTrainerPokemonRequest} [postTrainerPokemonRequest] New pokemon to add to your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTrainerPokemon(postTrainerPokemonRequest?: PostTrainerPokemonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pokemon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTrainerPokemon(postTrainerPokemonRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a pokemon. Entire entry must be sent.
         * @summary Update a pokemon
         * @param {string} id 
         * @param {Pokemon} [pokemon] Complete pokemon object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTrainerPokemonId(id: string, pokemon?: Pokemon, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pokemon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTrainerPokemonId(id, pokemon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainerApi - factory interface
 * @export
 */
export const TrainerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainerApiFp(configuration)
    return {
        /**
         * Delete a pokemon from your account. Also known as \"releasing\" a pokemon.
         * @summary Release a pokemon
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainerPokemonId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTrainerPokemonId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about your pokemon trainer (user account).
         * @summary Get Trainer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainer(options?: any): AxiosPromise<Trainer> {
            return localVarFp.getTrainer(options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all the pokemon you have
         * @summary Get your pokemon
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainerPokemon(options?: any): AxiosPromise<Array<Pokemon>> {
            return localVarFp.getTrainerPokemon(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a pokemon that is attached to your account
         * @summary Get a pokemon
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainerPokemonId(id: string, options?: any): AxiosPromise<Pokemon> {
            return localVarFp.getTrainerPokemonId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update your trainer profile. Returns the entire updated profile.
         * @summary Update Profile
         * @param {Trainer} [trainer] Object containing any fields to be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTrainer(trainer?: Trainer, options?: any): AxiosPromise<Trainer> {
            return localVarFp.patchTrainer(trainer, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new pokemon to your account
         * @summary Add new pokemon
         * @param {PostTrainerPokemonRequest} [postTrainerPokemonRequest] New pokemon to add to your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTrainerPokemon(postTrainerPokemonRequest?: PostTrainerPokemonRequest, options?: any): AxiosPromise<Pokemon> {
            return localVarFp.postTrainerPokemon(postTrainerPokemonRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a pokemon. Entire entry must be sent.
         * @summary Update a pokemon
         * @param {string} id 
         * @param {Pokemon} [pokemon] Complete pokemon object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTrainerPokemonId(id: string, pokemon?: Pokemon, options?: any): AxiosPromise<Pokemon> {
            return localVarFp.putTrainerPokemonId(id, pokemon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrainerApi - object-oriented interface
 * @export
 * @class TrainerApi
 * @extends {BaseAPI}
 */
export class TrainerApi extends BaseAPI {
    /**
     * Delete a pokemon from your account. Also known as \"releasing\" a pokemon.
     * @summary Release a pokemon
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerApi
     */
    public deleteTrainerPokemonId(id: string, options?: AxiosRequestConfig) {
        return TrainerApiFp(this.configuration).deleteTrainerPokemonId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about your pokemon trainer (user account).
     * @summary Get Trainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerApi
     */
    public getTrainer(options?: AxiosRequestConfig) {
        return TrainerApiFp(this.configuration).getTrainer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all the pokemon you have
     * @summary Get your pokemon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerApi
     */
    public getTrainerPokemon(options?: AxiosRequestConfig) {
        return TrainerApiFp(this.configuration).getTrainerPokemon(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a pokemon that is attached to your account
     * @summary Get a pokemon
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerApi
     */
    public getTrainerPokemonId(id: string, options?: AxiosRequestConfig) {
        return TrainerApiFp(this.configuration).getTrainerPokemonId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update your trainer profile. Returns the entire updated profile.
     * @summary Update Profile
     * @param {Trainer} [trainer] Object containing any fields to be modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerApi
     */
    public patchTrainer(trainer?: Trainer, options?: AxiosRequestConfig) {
        return TrainerApiFp(this.configuration).patchTrainer(trainer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new pokemon to your account
     * @summary Add new pokemon
     * @param {PostTrainerPokemonRequest} [postTrainerPokemonRequest] New pokemon to add to your account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerApi
     */
    public postTrainerPokemon(postTrainerPokemonRequest?: PostTrainerPokemonRequest, options?: AxiosRequestConfig) {
        return TrainerApiFp(this.configuration).postTrainerPokemon(postTrainerPokemonRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a pokemon. Entire entry must be sent.
     * @summary Update a pokemon
     * @param {string} id 
     * @param {Pokemon} [pokemon] Complete pokemon object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainerApi
     */
    public putTrainerPokemonId(id: string, pokemon?: Pokemon, options?: AxiosRequestConfig) {
        return TrainerApiFp(this.configuration).putTrainerPokemonId(id, pokemon, options).then((request) => request(this.axios, this.basePath));
    }
}
