/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 20220523
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { AbilityEffectChange } from './ability-effect-change';
// May contain unused imports in some cases
// @ts-ignore
import { ContestComboSets } from './contest-combo-sets';
// May contain unused imports in some cases
// @ts-ignore
import { MoveContestEffect } from './move-contest-effect';
// May contain unused imports in some cases
// @ts-ignore
import { MoveContestType } from './move-contest-type';
// May contain unused imports in some cases
// @ts-ignore
import { MoveMetaData } from './move-meta-data';
// May contain unused imports in some cases
// @ts-ignore
import { MoveStatChange } from './move-stat-change';
// May contain unused imports in some cases
// @ts-ignore
import { Name } from './name';
// May contain unused imports in some cases
// @ts-ignore
import { PastMoveStatValues } from './past-move-stat-values';
// May contain unused imports in some cases
// @ts-ignore
import { VerboseEffect } from './verbose-effect';

/**
 * 
 * @export
 * @interface Move
 */
export interface Move {
    /**
     * The identifier for this move resource
     * @type {number}
     * @memberof Move
     */
    'id': number;
    /**
     * The name for this move resource
     * @type {string}
     * @memberof Move
     */
    'name': string;
    /**
     * The percent value of how likely this move is to be successful
     * @type {number}
     * @memberof Move
     */
    'accuracy'?: number | null;
    /**
     * The percent value of the additional effects this move has occuring
     * @type {number}
     * @memberof Move
     */
    'effect_chance'?: number | null;
    /**
     * Power points. The number of times this move can be used
     * @type {number}
     * @memberof Move
     */
    'pp': number;
    /**
     * A value of 0 means this move goes last in the turn, and 1 means it goes first
     * @type {number}
     * @memberof Move
     */
    'priority': number;
    /**
     * The base power of this move with a value of 0 if it does not have a base power
     * @type {number}
     * @memberof Move
     */
    'power'?: number | null;
    /**
     * 
     * @type {ContestComboSets}
     * @memberof Move
     */
    'contest_combos'?: ContestComboSets;
    /**
     * 
     * @type {MoveContestType}
     * @memberof Move
     */
    'contest_type'?: MoveContestType;
    /**
     * 
     * @type {MoveContestEffect}
     * @memberof Move
     */
    'contest_effect'?: MoveContestEffect;
    /**
     * 
     * @type {MoveContestType}
     * @memberof Move
     */
    'damage_class'?: MoveContestType;
    /**
     * 
     * @type {Array<VerboseEffect>}
     * @memberof Move
     */
    'effect_entries'?: Array<VerboseEffect>;
    /**
     * 
     * @type {Array<AbilityEffectChange>}
     * @memberof Move
     */
    'effect_changes'?: Array<AbilityEffectChange>;
    /**
     * 
     * @type {MoveContestType}
     * @memberof Move
     */
    'generation': MoveContestType;
    /**
     * 
     * @type {MoveMetaData}
     * @memberof Move
     */
    'meta'?: MoveMetaData;
    /**
     * 
     * @type {Array<Name>}
     * @memberof Move
     */
    'names'?: Array<Name>;
    /**
     * 
     * @type {Array<PastMoveStatValues>}
     * @memberof Move
     */
    'past_values'?: Array<PastMoveStatValues>;
    /**
     * 
     * @type {Array<MoveStatChange>}
     * @memberof Move
     */
    'stat_changes'?: Array<MoveStatChange>;
    /**
     * 
     * @type {MoveContestEffect}
     * @memberof Move
     */
    'super_contest_effect'?: MoveContestEffect;
    /**
     * 
     * @type {MoveContestType}
     * @memberof Move
     */
    'target': MoveContestType;
    /**
     * 
     * @type {MoveContestType}
     * @memberof Move
     */
    'type': MoveContestType;
}

